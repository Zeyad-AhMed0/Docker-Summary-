# ๐ณ Introduction to Docker

## ๐ What is Docker?

**Docker** is an open-source platform that helps developers package applications and their dependencies into a single standardized unit called a **container**.

ุจูุนูู ุชุงูู:  
> Docker ุจูุฎููู ุชูุฏุฑ ุชุดุบู ุฃู ุชุทุจูู ูู ุจูุฆุฉ ูุนุฒููุฉ (Container)ุ ูุงูุจูุฆุฉ ุฏู ุจูููู ูููุง ูู ุญุงุฌุฉ ุงูุชุทุจูู ูุญุชุงุฌูุง ุนูุดุงู ูุดุชุบูุ ูู ุบูุฑ ูุง ูุชุฃุซุฑ ุจูุธุงู ุงูุชุดุบูู ุฃู ุงูุฌูุงุฒ ุงููู ุดุบุงู ุนููู.

---

## ๐ Containers vs Virtual Machines

| Feature              | Containers ๐ณ            | Virtual Machines ๐ป         |
|----------------------|--------------------------|------------------------------|
| Boot time            | Seconds                  | Minutes                      |
| Resource usage       | Lightweight              | Heavy (includes full OS)     |
| OS dependency        | Shares host OS kernel    | Has its own full OS          |
| Performance          | Near-native              | Slightly lower               |
| Isolation level      | Process-level isolation  | Full OS-level isolation      |

๐น ุจุจุณุงุทุฉ:  
- **VMs** ุจุชุดุชุบู ูุฃููุง ุฌูุงุฒ ูุงูู ุฌูู ุฌูุงุฒูุ ูุจุชุณุชููู RAM ูCPU ุฃุนูู.  
- **Containers** ุจุชุดุงุฑู ููุณ ุงูููุฑูู (Kernel) ุจุชุงุน ูุธุงู ุงูุชุดุบููุ ูู ุฎูููุฉ ูุณุฑูุนุฉ ุฌุฏูุง.

---

## ๐ฏ Why Use Docker?

- ๐ฆ **Consistency**: ุจูุฎูู ุงูุชุทุจูู ูุดุชุบู ุจููุณ ุงูุดูู ุนูู ุฃู ุฌูุงุฒ (Developer machine, Test server, Production).
- ๐ **Fast deployment**: ุจุชุดุบู ุงูุชุทุจูู ูู ุซูุงูู.
- ๐งช **Easy testing**: ุชูุฏุฑ ุชุจูู ุจูุฆุงุช testing ูุคูุชุฉ ุจุณูููุฉ.
- ๐ **CI/CD Friendly**: ุจูุชูุงูู ุจุณูููุฉ ูุน ุฃุฏูุงุช ุงูู DevOps.
- ๐ **Isolation**: ูู container ุดุบุงู ููุญุฏูุ ูู ูููุด ุชุนุงุฑุถ.
- ๐ฅ **Scalability & Microservices** โ Docker ุจูุณููู ุฅุฏุงุฑุฉ ุงูุฎุฏูุงุช ุงูุตุบูุฑุฉ ูู ุงูุชุทุจููุงุช ุงูููุฒุนุฉ.


---

## ๐งฉ Key Concepts in Docker

| Concept     | Description                                                                 |
|-------------|-----------------------------------------------------------------------------|
| `Image`     | ูุงูุจ ุซุงุจุช ููุชุทุจูู (ุจูุญุชูู ุนูู ุงูููุฏุ ุงูุชุจุนูุงุชุ ูุจูุฆุฉ ุงูุชุดุบูู).             |
| `Container` | ูุณุฎุฉ ุดุบุงูุฉ ูู ุงูู Image โ ุงูุชุทุจูู ููุณู ููู ุดุบุงู.                          |
| `Dockerfile`| ููู ููู ุงูุชุนูููุงุช ุงููู ุจูุชุจูู ูููุง ุงูู Image.                              |
| `Docker Engine` | ุงูุฎุฏูุฉ ุงููู ุจุชุดุบู ุงูู containers ูุจุชุฏูุฑูุง ุนูู ุงูุฌูุงุฒ.                  |
| `Volume`    | ุทุฑููุฉ ูุญูุธ ุงูุฏุงุชุง ุฎุงุฑุฌ ุงูู container (ุนุดุงู ูุชุถูุนุด ูู ุงูู container ููู).   |
| `Network`   | ุจูุฎูู ุงูู containers ุชุชููู ูุน ุจุนุถ ุฃู ูุน ุงูุนุงูู ุงูุฎุงุฑุฌู.                    |
| `Registry`  | ููุงู ุจูุฑูุน ุนููู ุฃู ูุญูู ููู ุงูู Images (ุฒู Docker Hub).                    |

---

## ๐ Visual Example

ุชุฎูู ุฅูู ุจุชุจูู ุชุทุจูู Node.js ูุนุงูุฒ ุชูุดุฑู ูู ูุฐุง ููุงู (ุฌูุงุฒู โ ุฌูุงุฒ ุฒูููู โ ุณูุฑูุฑ ุงูุฅูุชุงุฌ).

- โ Without Docker:  
  ูุงุฒู ุชู:
  - ุชุซุจุช Node.js ุจููุณ ุงููุณุฎุฉ
  - ุชุซุจุช ููุณ ุงูู npm packages
  - ุชุธุจุท ุฅุนุฏุงุฏุงุช ุงูุจูุฆุฉ

  ููู ุฏู ูููู ูุฎุชูู ูู ุฌูุงุฒ ููุชุงูู.

- โ With Docker:
  - ุจุชูุชุจ `Dockerfile` ูุญุฏุฏ ุงูุฎุทูุงุช ูุชุฌููุฒ ุงูุจูุฆุฉ.
  - ุชุจูู Image ูุชุดุบูููุง ูู Container.
  - ุฃู ุญุฏ ููุฏุฑ ูุดุบูู ููุณ ุงูุชุทุจูู ุจุฏูู ุฅุนุฏุงุฏุงุช ุฅุถุงููุฉ.

๐ฏ ุงููุชูุฌุฉ: ุงูุชุทุจูู ุจูุดุชุบู ุจููุณ ุงูุดูู ูู ูู ุจูุฆุฉุ ุจุฏูู ูุง ุชููุฑ ูู ุงุฎุชูุงูุงุช ุงููุธุงู ุฃู ุงูุฅุนุฏุงุฏุงุช.

---

## โ Summary

- Docker = Platform to build, ship, and run applications using containers.
- Containers = Lightweight, fast, and consistent environments.
- Perfect for developers, testers, and DevOps engineers.
